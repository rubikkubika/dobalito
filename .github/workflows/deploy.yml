name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY_URL: https://retsko.ru
  BACKEND_IMAGE: dobalito-backend
  FRONTEND_IMAGE: dobalito-frontend

jobs:
  # --- 1. Проверка и подготовка инфраструктуры ---
  deploy-infrastructure:
    runs-on: ubuntu-latest
    env:
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      - name: Deploy base infrastructure
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          timeout: 300s
          script: |
            set -e
            export CONTAINER_NAME_PREFIX=dobalito
            sudo mkdir -p /opt/dobalito/docker
            sudo chown $USER:$USER /opt/dobalito
            cd /opt/dobalito

            echo "=== Pulling base images ==="
            docker pull postgres:15-alpine &
            docker pull nginx:alpine &
            wait

            echo "=== Starting DB and Nginx ==="
            docker compose -f docker/docker-compose.prod.yml up -d postgres nginx

            sleep 10
            echo "=== Checking DB existence ==="
            docker exec -e PGPASSWORD=${{ env.POSTGRES_PASSWORD }} dobalito-postgres \
              psql -U postgres -tAc "SELECT 1 FROM pg_database WHERE datname='dobalito'" | grep -q 1 || \
              docker exec -e PGPASSWORD=${{ env.POSTGRES_PASSWORD }} dobalito-postgres \
              psql -U postgres -c "CREATE DATABASE dobalito;"

  # --- 2. Проверяем миграции Flyway ---
  test-migrations:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    env:
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      - name: Repair Flyway schema history
        run: |
          docker run --rm \
            -v $PWD/backend/src/main/resources/db/migration:/flyway/sql \
            flyway/flyway:9-alpine \
            -url=jdbc:postgresql://${{ secrets.SERVER_HOST }}:5432/dobalito \
            -user=postgres \
            -password=${{ secrets.POSTGRES_PASSWORD }} \
            repair

      - name: Run Flyway migrations
        run: |
          docker run --rm \
            -v $PWD/backend/src/main/resources/db/migration:/flyway/sql \
            flyway/flyway:9-alpine \
            -url=jdbc:postgresql://${{ secrets.SERVER_HOST }}:5432/dobalito \
            -user=postgres \
            -password=${{ secrets.POSTGRES_PASSWORD }} \
            migrate

  # --- 3. Сборка backend ---
  build-backend:
    runs-on: ubuntu-latest
    needs: test-migrations
    outputs:
      image: ${{ steps.meta.outputs.tags }}
      hash: ${{ steps.backend-hash.outputs.hash }}
      exists: ${{ steps.backend-image-exists.outputs.exists }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Нужно для сравнения с предыдущим коммитом
      
      - name: Calculate backend content hash
        id: backend-hash
        run: |
          # Создаем хэш из всех релевантных файлов для backend
          HASH=$(find backend/ -type f -name "*.java" -o -name "*.xml" -o -name "*.yml" -o -name "*.sql" | sort | xargs md5sum | md5sum | cut -d' ' -f1)
          echo "hash=$HASH" >> $GITHUB_OUTPUT
          echo "Backend content hash: $HASH"

      - name: Check if backend image exists in registry
        id: backend-image-exists
        run: |
          # Проверяем, есть ли образ с таким хэшем в registry
          if docker manifest inspect retsko.ru/${{ env.BACKEND_IMAGE }}:${{ steps.backend-hash.outputs.hash }} >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Backend image with hash ${{ steps.backend-hash.outputs.hash }} already exists in registry"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Backend image with hash ${{ steps.backend-hash.outputs.hash }} not found, will build"
          fi
      
      - uses: docker/setup-buildx-action@v3
      - run: echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV

      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Set metadata
        id: meta
        if: steps.backend-image-exists.outputs.exists == 'false'
        uses: docker/metadata-action@v5
        with:
          images: retsko.ru/${{ env.BACKEND_IMAGE }}
          tags: |
            type=raw,value=${{ steps.backend-hash.outputs.hash }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & Push Backend
        if: steps.backend-image-exists.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha,scope=dobalito-backend
          cache-to: type=gha,scope=dobalito-backend,mode=max

  # --- 4. Сборка frontend ---
  build-frontend:
    runs-on: ubuntu-latest
    needs: test-migrations
    outputs:
      image: ${{ steps.meta.outputs.tags }}
      hash: ${{ steps.frontend-hash.outputs.hash }}
      exists: ${{ steps.frontend-image-exists.outputs.exists }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Нужно для сравнения с предыдущим коммитом
      
      - name: Calculate frontend content hash
        id: frontend-hash
        run: |
          # Создаем хэш из всех релевантных файлов для frontend
          HASH=$(find frontend-react/ -type f -name "*.tsx" -o -name "*.ts" -o -name "*.js" -o -name "*.json" -o -name "*.css" | sort | xargs md5sum | md5sum | cut -d' ' -f1)
          echo "hash=$HASH" >> $GITHUB_OUTPUT
          echo "Frontend content hash: $HASH"

      - name: Check if frontend image exists in registry
        id: frontend-image-exists
        run: |
          # Проверяем, есть ли образ с таким хэшем в registry
          if docker manifest inspect retsko.ru/${{ env.FRONTEND_IMAGE }}:${{ steps.frontend-hash.outputs.hash }} >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Frontend image with hash ${{ steps.frontend-hash.outputs.hash }} already exists in registry"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Frontend image with hash ${{ steps.frontend-hash.outputs.hash }} not found, will build"
          fi
      
      - uses: docker/setup-buildx-action@v3
      - run: echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV

      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Set metadata
        id: meta
        if: steps.frontend-image-exists.outputs.exists == 'false'
        uses: docker/metadata-action@v5
        with:
          images: retsko.ru/${{ env.FRONTEND_IMAGE }}
          tags: |
            type=raw,value=${{ steps.frontend-hash.outputs.hash }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & Push Frontend
        if: steps.frontend-image-exists.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.frontend-react
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha,scope=dobalito-frontend
          cache-to: type=gha,scope=dobalito-frontend,mode=max

  # --- 5. Деплой ---
  deploy-applications:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    env:
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      - name: Check if deployment needed
        id: deploy-needed
        run: |
          if [[ "${{ needs.build-backend.outputs.exists }}" == "false" || "${{ needs.build-frontend.outputs.exists }}" == "false" ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
            echo "New images detected, deployment needed"
            echo "Backend exists: ${{ needs.build-backend.outputs.exists }}"
            echo "Frontend exists: ${{ needs.build-frontend.outputs.exists }}"
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
            echo "All images already exist, skipping deployment"
          fi

      - name: Deploy to server
        if: steps.deploy-needed.outputs.deploy == 'true'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          timeout: 300s
          script: |
            set -e
            export CONTAINER_NAME_PREFIX=dobalito
            cd /opt/dobalito

            echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login retsko.ru -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin

            echo "=== Repairing Flyway schema history ==="
            docker run --rm \
              -v /opt/dobalito/backend/src/main/resources/db/migration:/flyway/sql \
              flyway/flyway:9-alpine \
              -url=jdbc:postgresql://${{ secrets.SERVER_HOST }}:5432/dobalito \
              -user=postgres \
              -password="${{ secrets.POSTGRES_PASSWORD }}" \
              repair

            echo "=== Pulling images with specific hashes ==="
            # Pull backend image with hash
            docker pull retsko.ru/${{ env.BACKEND_IMAGE }}:${{ needs.build-backend.outputs.hash }} || echo "Backend image not found, using latest"
            docker tag retsko.ru/${{ env.BACKEND_IMAGE }}:${{ needs.build-backend.outputs.hash }} retsko.ru/${{ env.BACKEND_IMAGE }}:latest || echo "Backend tagging failed"
            
            # Pull frontend image with hash  
            docker pull retsko.ru/${{ env.FRONTEND_IMAGE }}:${{ needs.build-frontend.outputs.hash }} || echo "Frontend image not found, using latest"
            docker tag retsko.ru/${{ env.FRONTEND_IMAGE }}:${{ needs.build-frontend.outputs.hash }} retsko.ru/${{ env.FRONTEND_IMAGE }}:latest || echo "Frontend tagging failed"

            echo "=== Restarting containers ==="
            docker compose -f docker/docker-compose.prod.yml up -d backend frontend-react

            echo "=== Checking health ==="
            docker ps --filter "name=dobalito"
            curl -f http://localhost:8080/api/v1/auth/test || echo "Backend health check failed"
            curl -f http://localhost:3000 || echo "Frontend health check failed"

      - name: Notify status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi
