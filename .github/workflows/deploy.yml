name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Позволяет запускать вручную

# Trigger GitHub Actions

env:
  REGISTRY_URL: https://retsko.ru
  BACKEND_IMAGE: dobalito-backend
  FRONTEND_IMAGE: dobalito-frontend

jobs:
  test-migrations:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: dobalito_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run Flyway migrations test
      run: |
        cd backend
        echo "Waiting for PostgreSQL to be ready..."
        sleep 10
        
        echo "Creating test database..."
        PGPASSWORD=password psql -h localhost -U postgres -c "CREATE DATABASE dobalito;" || echo "Database might already exist"
        
        echo "Compiling project to ensure migrations are in target/classes..."
        mvn compile
        
        echo "Checking if migrations are compiled correctly..."
        ls -la target/classes/db/migration/ || echo "Migration files not found in target/classes"
        
        echo "Running Flyway migrations..."
        mvn flyway:migrate -Dflyway.url=jdbc:postgresql://localhost:5432/dobalito -Dflyway.user=postgres -Dflyway.password=password
        
        echo "Checking migration results..."
        PGPASSWORD=password psql -h localhost -U postgres -d dobalito -c "SELECT version, description, installed_on, success FROM flyway_schema_history ORDER BY installed_rank;"
        
        echo "Checking table structures..."
        PGPASSWORD=password psql -h localhost -U postgres -d dobalito -c "\dt"
        
        echo "Checking users table has date_of_birth column..."
        PGPASSWORD=password psql -h localhost -U postgres -d dobalito -c "SELECT column_name, data_type, is_nullable FROM information_schema.columns WHERE table_name = 'users' AND column_name = 'date_of_birth';"
        
        echo "Testing data insertion..."
        PGPASSWORD=password psql -h localhost -U postgres -d dobalito -c "INSERT INTO users (name, email, date_of_birth) VALUES ('Test User', 'test@example.com', '1990-01-01');"
        
        echo "Verifying test data..."
        PGPASSWORD=password psql -h localhost -U postgres -d dobalito -c "SELECT id, name, email, date_of_birth FROM users WHERE email = 'test@example.com';"

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: test-migrations
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Prepare server directories
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          sudo mkdir -p /opt/dobalito/docker
          sudo chown $USER:$USER /opt/dobalito
    
    - name: Copy docker-compose.prod.yml to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        source: "docker/docker-compose.prod.yml"
        target: "/opt/dobalito/docker/"
        strip_components: 1
    
    - name: Copy nginx.conf to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        source: "docker/nginx.conf"
        target: "/opt/dobalito/docker/"
        strip_components: 1
    
    - name: Copy env.production to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        source: "env.production"
        target: "/opt/dobalito/"
        overwrite: true
    
    - name: Deploy infrastructure
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          cd /opt/dobalito
          
          # Переименовываем env.production в .env
          mv env.production .env
          
          # Останавливаем только наши сервисы, НЕ трогаем registry
          docker-compose -f docker/docker-compose.prod.yml down || true
          
          # Удаляем только orphan контейнеры НАШЕГО проекта (не registry)
          docker ps -a --filter "name=dobalito-" --filter "status=exited" -q | xargs -r docker rm || true
          
          # Запускаем только инфраструктуру (postgres, nginx)
          docker-compose -f docker/docker-compose.prod.yml up -d postgres nginx
          
          # Ждем запуска PostgreSQL
          sleep 15
          
          # Создаем базу данных если она не существует
          echo "=== Creating database ==="
          docker exec dobalito-postgres psql -U postgres -c "CREATE DATABASE dobalito;" || echo "Database already exists or creation failed"
          
          # Проверяем что база создана
          docker exec dobalito-postgres psql -U postgres -c "\l" | grep dobalito || echo "Database not found"
          
          # Выполняем скрипт инициализации
          echo "=== Running database initialization script ==="
          docker exec dobalito-postgres psql -U postgres -d dobalito -f /docker-entrypoint-initdb.d/init.sql || echo "Init script failed or already executed"
          
          # Детальная проверка базы данных
          echo "=== Database verification ==="
          echo "List of databases:"
          docker exec dobalito-postgres psql -U postgres -c "\l"
          
          echo "Tables in dobalito database:"
          docker exec dobalito-postgres psql -U postgres -d dobalito -c "\dt"
          
          echo "Sample data in app_info table:"
          docker exec dobalito-postgres psql -U postgres -d dobalito -c "SELECT * FROM app_info;"
          
          echo "Database connection test:"
          docker exec dobalito-postgres psql -U postgres -d dobalito -c "SELECT current_database(), current_user, version();"
          
          # Проверяем что таблица flyway_schema_history создана (это означает что Flyway работает)
          echo "=== Checking Flyway setup ==="
          docker exec dobalito-postgres psql -U postgres -d dobalito -c "SELECT COUNT(*) as migration_count FROM flyway_schema_history;" || echo "Flyway schema history table not found yet"
          
          # Проверяем статус
          echo "=== Infrastructure status ==="
          docker ps -a
          
          # Диагностика сети для registry
          echo "=== Network diagnostics ==="
          echo "Docker bridge IP:"
          docker network inspect bridge | grep Gateway || echo "Gateway not found"
          echo "Host IP addresses:"
          ip route | grep default | awk '{print $3}' || echo "Default route not found"
          echo "Registry connectivity test:"
          curl -u admin:root http://172.17.0.1:5000/v2/ && echo "Registry accessible via bridge IP" || echo "Registry not accessible via bridge IP"
          curl -u admin:root http://89.208.14.20:5000/v2/ && echo "Registry accessible via host IP" || echo "Registry not accessible via host IP"
          
          # Проверяем статус upstream в Nginx
          echo "=== Nginx upstream status ==="
          docker exec dobalito-nginx nginx -T | grep -A 10 "upstream registry_backend" || echo "Upstream config not found"
          
          # Ждем стабилизации Nginx
          echo "=== Waiting for Nginx to stabilize ==="
          sleep 15
          docker ps --filter "name=dobalito-nginx"
          
          # Проверяем логи Nginx для диагностики
          echo "=== Nginx logs ==="
          docker logs dobalito-nginx --tail 20
          
          # Проверяем подключение из Nginx контейнера к registry (с аутентификацией)
          echo "=== Testing registry connection from Nginx container ==="
          docker exec dobalito-nginx curl -u admin:root http://172.17.0.1:5000/v2/ && echo "Registry accessible from Nginx via bridge IP" || echo "Registry NOT accessible from Nginx via bridge IP"
          docker exec dobalito-nginx curl -u admin:root http://89.208.14.20:5000/v2/ && echo "Registry accessible from Nginx via host IP" || echo "Registry NOT accessible from Nginx via host IP"
          
          # Проверяем логи Nginx
          docker exec dobalito-nginx cat /var/log/nginx/registry_access.log 2>/dev/null || echo "Registry access log not found"
          docker exec dobalito-nginx cat /var/log/nginx/registry_error.log 2>/dev/null || echo "Registry error log not found"
          
          # Проверяем, что registry работает
          echo "=== Registry status ==="
          docker ps --filter "name=registry" || echo "Registry not found in docker ps"
          curl -u admin:root https://retsko.ru/v2/ && echo "Registry accessible via HTTPS" || echo "Registry not accessible via HTTPS"

  build-images:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    outputs:
      backend-image: ${{ steps.meta.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:latest
          network=host
    
    - name: Configure Docker BuildKit
      run: |
        echo "DOCKER_BUILDKIT=0" >> $GITHUB_ENV
    
    - name: Login to Private Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: retsko.ru/${{ env.BACKEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Backend
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: retsko.ru/${{ env.FRONTEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Frontend
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.frontend-react
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-applications:
    runs-on: ubuntu-latest
    needs: build-images
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy applications to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          cd /opt/dobalito
          
          # Логинимся в приватный registry
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login retsko.ru -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin
          
          # Запускаем приложения (backend и frontend)
          docker-compose -f docker/docker-compose.prod.yml up -d backend frontend-react
          
          # Ждем запуска и проверяем health
          sleep 30
          
          # Проверяем статус контейнеров
          echo "=== Docker containers status ==="
          docker ps -a
          
          # Проверяем логи backend
          echo "=== Backend logs ==="
          docker logs dobalito-backend --tail 50
          
          # Проверяем Flyway миграции
          echo "=== Flyway Migration Verification ==="
          echo "Checking flyway_schema_history table:"
          docker exec dobalito-postgres psql -U postgres -d dobalito -c "SELECT version, description, installed_on, success FROM flyway_schema_history ORDER BY installed_rank;"
          
          echo "Checking if all tables were created by Flyway:"
          docker exec dobalito-postgres psql -U postgres -d dobalito -c "\dt"
          
          echo "Checking users table structure (should include date_of_birth):"
          docker exec dobalito-postgres psql -U postgres -d dobalito -c "\d users"
          
          echo "Checking categories table structure:"
          docker exec dobalito-postgres psql -U postgres -d dobalito -c "\d categories"
          
          echo "Checking tasks table structure:"
          docker exec dobalito-postgres psql -U postgres -d dobalito -c "\d tasks"
          
          echo "Checking if date_of_birth column exists in users table:"
          docker exec dobalito-postgres psql -U postgres -d dobalito -c "SELECT column_name, data_type, is_nullable FROM information_schema.columns WHERE table_name = 'users' AND column_name = 'date_of_birth';"
          
          echo "Testing data insertion with new field:"
          docker exec dobalito-postgres psql -U postgres -d dobalito -c "INSERT INTO users (name, email, date_of_birth) VALUES ('Test User', 'test@example.com', '1990-01-01') ON CONFLICT (email) DO NOTHING;"
          
          echo "Verifying test data:"
          docker exec dobalito-postgres psql -U postgres -d dobalito -c "SELECT id, name, email, date_of_birth FROM users WHERE email = 'test@example.com';"
          
          # Проверяем health check
          echo "=== Health check ==="
          curl -f http://localhost:8080/api/v1/auth/test || echo "Backend health check failed"
          curl -f https://retsko.ru/api/v1/auth/test || echo "Nginx proxy health check failed"
          
          echo "Deployment successful!"
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi
