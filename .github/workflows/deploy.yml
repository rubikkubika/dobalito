name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Позволяет запускать вручную

# Trigger GitHub Actions

env:
  REGISTRY_URL: https://89.208.14.20
  BACKEND_IMAGE: dobalito-backend
  FRONTEND_IMAGE: dobalito-frontend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:latest
          network=host
    
    - name: Configure Docker for HTTP registry
      run: |
        echo '{"insecure-registries":["89.208.14.20"],"registry-mirrors":[],"dns":["8.8.8.8","8.8.4.4"]}' | sudo tee /etc/docker/daemon.json
        sudo systemctl restart docker
        sleep 5
        echo "DOCKER_BUILDKIT=0" >> $GITHUB_ENV
        echo "DOCKER_HOST=tcp://localhost:2376" >> $GITHUB_ENV
    
    - name: Add self-signed certificate to trusted
      run: |
        echo | openssl s_client -connect 89.208.14.20:443 -servername 89.208.14.20 2>/dev/null | openssl x509 -outform PEM > /tmp/registry.crt
        sudo cp /tmp/registry.crt /usr/local/share/ca-certificates/
        sudo update-ca-certificates
    
    - name: Configure Docker client
      run: |
        mkdir -p ~/.docker
        echo '{"insecure-registries":["89.208.14.20"]}' > ~/.docker/config.json
    
    - name: Login to Private Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: 89.208.14.20/${{ env.BACKEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Backend
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: 89.208.14.20/${{ env.FRONTEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Frontend
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.frontend-react
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Deploy to Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          cd /opt/dobalito
          
          # Создаем .env файл для продакшена
          cat > .env << EOF
          BACKEND_IMAGE=${{ env.REGISTRY_URL }}/${{ env.BACKEND_IMAGE }}:latest
          FRONTEND_IMAGE=${{ env.REGISTRY_URL }}/${{ env.FRONTEND_IMAGE }}:latest
          DATABASE_URL=jdbc:postgresql://postgres:5432/dobalito
          DB_USERNAME=postgres
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION=3600000
          BACKEND_PORT=8080
          FRONTEND_PORT=3000
          POSTGRES_PORT=5432
          CONTAINER_NAME_PREFIX=dobalito-prod
          BACKEND_URL=http://backend:8080
          EOF
          
          # Перезапускаем сервисы
          docker-compose -f docker/docker-compose.yml down
          docker-compose -f docker/docker-compose.yml pull
          docker-compose -f docker/docker-compose.yml up -d
          
          # Ждем запуска и проверяем health
          sleep 30
          curl -f http://localhost:8080/api/v1/auth/test || exit 1
          echo "Deployment successful!"
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi
