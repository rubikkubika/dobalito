name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Позволяет запускать вручную

# Trigger GitHub Actions

env:
  REGISTRY_URL: https://retsko.ru
  BACKEND_IMAGE: dobalito-backend
  FRONTEND_IMAGE: dobalito-frontend

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Prepare server directories
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          sudo mkdir -p /opt/dobalito/docker
          sudo chown $USER:$USER /opt/dobalito
    
    - name: Copy docker-compose.prod.yml to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        source: "docker/docker-compose.prod.yml"
        target: "/opt/dobalito/docker/"
        strip_components: 1
    
    - name: Copy nginx.conf to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        source: "docker/nginx.conf"
        target: "/opt/dobalito/docker/"
        strip_components: 1
    
    - name: Copy env.production to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        source: "env.production"
        target: "/opt/dobalito/"
        overwrite: true
    
    - name: Deploy infrastructure
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          cd /opt/dobalito
          
          # Переименовываем env.production в .env
          mv env.production .env
          
          # Останавливаем старые сервисы и удаляем orphan контейнеры
          docker-compose -f docker/docker-compose.prod.yml down --remove-orphans || true
          
          # Запускаем только инфраструктуру (postgres, nginx)
          docker-compose -f docker/docker-compose.prod.yml up -d postgres nginx
          
          # Ждем запуска инфраструктуры
          sleep 10
          
          # Проверяем статус
          echo "=== Infrastructure status ==="
          docker ps -a

  build-images:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    outputs:
      backend-image: ${{ steps.meta.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:latest
          network=host
    
    - name: Configure Docker BuildKit
      run: |
        echo "DOCKER_BUILDKIT=0" >> $GITHUB_ENV
    
    - name: Login to Private Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: retsko.ru/${{ env.BACKEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Backend
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: retsko.ru/${{ env.FRONTEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Frontend
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.frontend-react
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-applications:
    runs-on: ubuntu-latest
    needs: build-images
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy applications to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          cd /opt/dobalito
          
          # Логинимся в приватный registry
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login retsko.ru -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin
          
          # Запускаем приложения (backend и frontend)
          docker-compose -f docker/docker-compose.prod.yml up -d backend frontend-react
          
          # Ждем запуска и проверяем health
          sleep 30
          
          # Проверяем статус контейнеров
          echo "=== Docker containers status ==="
          docker ps -a
          
          # Проверяем логи backend
          echo "=== Backend logs ==="
          docker logs dobalito-backend --tail 50
          
          # Проверяем health check
          echo "=== Health check ==="
          curl -f http://localhost:8080/api/v1/auth/test || echo "Backend health check failed"
          curl -f https://retsko.ru/api/v1/auth/test || echo "Nginx proxy health check failed"
          
          echo "Deployment successful!"
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi
