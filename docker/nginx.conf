# Main Nginx configuration for retsko.ru
# Reverse proxy for frontend and backend

# DNS resolver for dynamic upstream resolution
resolver 127.0.0.11 valid=10s;

# Docker Registry upstream
upstream registry_backend {
    server 172.17.0.1:5000 max_fails=3 fail_timeout=30s;
    server 89.208.14.20:5000 max_fails=3 fail_timeout=30s backup;
    server host.docker.internal:5000 max_fails=3 fail_timeout=30s backup;
    
    # Настройки для лучшей совместимости
    keepalive 32;
    keepalive_requests 100;
    keepalive_timeout 60s;
}

# HTTP server - redirect to HTTPS
server {
    listen 80;
    server_name retsko.ru www.retsko.ru;
    
    # Redirect all HTTP requests to HTTPS
    return 301 https://$server_name$request_uri;
}

# HTTPS server
server {
    listen 443 ssl;
    http2 on;
    server_name retsko.ru www.retsko.ru;
    
    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/retsko.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/retsko.ru/privkey.pem;
    
    # SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Client timeout settings
    client_header_timeout 60s;
    client_body_timeout 60s;
    
    # File upload limits
    client_max_body_size 10M;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Frontend (React app)
    location / {
        set $frontend_upstream frontend-react:3000;
        proxy_pass http://$frontend_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Aggressive timeout settings for unavailable upstreams
        proxy_connect_timeout 2s;
        proxy_send_timeout 2s;
        proxy_read_timeout 2s;
        
        # Fast failover for unavailable upstreams
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_next_upstream_timeout 2s;
        proxy_next_upstream_tries 1;
        
        # Handle client-side routing
        proxy_intercept_errors on;
        error_page 404 = @fallback;
    }
    
    # Fallback for client-side routing
    location @fallback {
        set $frontend_upstream frontend-react:3000;
        proxy_pass http://$frontend_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Aggressive timeout settings for unavailable upstreams
        proxy_connect_timeout 2s;
        proxy_send_timeout 2s;
        proxy_read_timeout 2s;
        
        # Fast failover for unavailable upstreams
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_next_upstream_timeout 2s;
        proxy_next_upstream_tries 1;
    }
    
    # Backend API
    location /api/ {
        set $backend_upstream backend:8080;
        proxy_pass http://$backend_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # File upload settings for API
        client_max_body_size 10M;
        client_body_timeout 60s;
        
        # Aggressive timeout settings for unavailable upstreams
        proxy_connect_timeout 2s;
        proxy_send_timeout 2s;
        proxy_read_timeout 2s;
        
        # Fast failover for unavailable upstreams
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_next_upstream_timeout 2s;
        proxy_next_upstream_tries 1;
        
        # Handle upstream errors gracefully
        proxy_intercept_errors on;
        error_page 502 503 504 = @backend_error;
        
        # CORS headers
        add_header Access-Control-Allow-Origin "https://retsko.ru" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
        add_header Access-Control-Allow-Credentials "true" always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "https://retsko.ru";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
            add_header Access-Control-Allow-Credentials "true";
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type 'text/plain; charset=utf-8';
            add_header Content-Length 0;
            return 204;
        }
    }
    
    # Backend error handler
    location @backend_error {
        return 503 "Backend service temporarily unavailable";
        add_header Content-Type text/plain;
    }
    
    # Docker Registry (HTTPS proxy to HTTP registry)
    location /v2/ {
        # Логирование для диагностики
        access_log /var/log/nginx/registry_access.log;
        error_log /var/log/nginx/registry_error.log;
        
        proxy_pass http://registry_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Registry specific headers
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Docker Registry specific settings
        proxy_set_header Authorization $http_authorization;
        proxy_pass_header Authorization;
        
        # Large file upload settings
        client_max_body_size 0;
        
        # Timeout settings
        proxy_connect_timeout 300;
        proxy_send_timeout 300;
        proxy_read_timeout 300;
        
        # Buffer settings
        proxy_buffering off;
        proxy_request_buffering off;
        
        # Large file handling
        proxy_max_temp_file_size 0;
        
        # Дополнительные настройки для registry
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        
        # Обработка ошибок
        proxy_intercept_errors on;
        error_page 502 503 504 = @registry_error;
    }
    
    # Обработчик ошибок для registry
    location @registry_error {
        return 502 "Registry temporarily unavailable. Please try again later.";
        add_header Content-Type text/plain;
    }
    
    # API Avatars - specific handling for user avatars
    location ~* ^/api/v1/users/avatar/.*\.(png|jpg|jpeg|gif|webp|svg)$ {
        set $backend_upstream backend:8080;
        proxy_pass http://$backend_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # File serving settings
        client_max_body_size 10M;
        client_body_timeout 60s;
        
        # Timeout settings
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
        
        # Caching for avatars
        expires 1h;
        add_header Cache-Control "public, max-age=3600";
        
        # CORS headers
        add_header Access-Control-Allow-Origin "https://retsko.ru" always;
        add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
        add_header Access-Control-Allow-Credentials "true" always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "https://retsko.ru";
            add_header Access-Control-Allow-Methods "GET, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
            add_header Access-Control-Allow-Credentials "true";
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type 'text/plain; charset=utf-8';
            add_header Content-Length 0;
            return 204;
        }
    }
    
    # Static files caching (excluding API avatars)
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        # Исключаем API аватары - они должны обрабатываться бэкендом
        if ($uri ~ ^/api/v1/users/avatar/) {
            break;
        }
        
        set $frontend_upstream frontend-react:3000;
        proxy_pass http://$frontend_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Aggressive timeout settings for unavailable upstreams
        proxy_connect_timeout 2s;
        proxy_send_timeout 2s;
        proxy_read_timeout 2s;
        
        # Fast failover for unavailable upstreams
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_next_upstream_timeout 2s;
        proxy_next_upstream_tries 1;
        
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
}