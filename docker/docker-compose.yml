# Docker Compose configuration optimized for faster builds
# Works locally with environment variables

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ${CONTAINER_NAME_PREFIX:-dobalito}-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-dobalito}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../config/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - dobalito-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Spring Boot Backend
  backend:
    build:
      context: ..
      dockerfile: backend/Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: ${CONTAINER_NAME_PREFIX:-dobalito}-backend
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-local}
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-dobalito}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-password}
      SERVER_PORT: ${BACKEND_PORT:-8080}
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dobalito-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend-react:
    build:
      context: ..
      dockerfile: docker/Dockerfile.frontend-react
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: ${CONTAINER_NAME_PREFIX:-dobalito}-frontend-react
    environment:
      REACT_APP_API_URL: ${BACKEND_URL:-http://backend:8080}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - dobalito-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:

networks:
  dobalito-network:
    driver: bridge
