# Multi-stage build for full-stack app
# Stage 1: Build backend
FROM maven:3.9-eclipse-temurin-17-alpine AS backend-builder

WORKDIR /app

# Copy pom.xml first for better caching
COPY backend/pom.xml .

# Download dependencies
RUN mvn dependency:go-offline -B

# Copy source code
COPY backend/src ./src

# Build the application
RUN mvn clean package -DskipTests -B

# Stage 2: Build frontend
FROM ghcr.io/cirruslabs/flutter:stable AS frontend-builder

WORKDIR /app

# Copy pubspec files first for better caching
COPY frontend/pubspec.yaml frontend/pubspec.lock* ./

# Get dependencies
RUN flutter pub get

# Copy source code
COPY frontend/ .

# Ensure web platform is enabled and create web directory if missing
RUN flutter config --enable-web && \
    flutter create . --platforms web --project-name dobalito

# Build for web with optimizations
RUN flutter build web --release

# Stage 3: Production with nginx
FROM nginx:alpine AS production

# Install Java runtime and curl
RUN apk add --no-cache openjdk17-jre curl

# Copy built backend jar
COPY --from=backend-builder /app/target/dobalito-backend-1.0.0.jar /app/app.jar

# Copy built frontend
COPY --from=frontend-builder /app/build/web /usr/share/nginx/html

# Copy nginx configuration
COPY docker/nginx.conf /etc/nginx/nginx.conf

# Copy startup script and nginx config generator
COPY scripts/start-simple.sh /start-simple.sh
COPY scripts/generate-nginx-config.sh /generate-nginx-config.sh
RUN chmod +x /start-simple.sh /generate-nginx-config.sh

# Expose ports
EXPOSE 80 8080

# Start services
CMD ["/start-simple.sh"]
