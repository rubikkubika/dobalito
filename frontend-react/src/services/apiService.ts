// API service for communicating with backend
import axios from 'axios';

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';

const api = axios.create({
  baseURL: `${API_BASE_URL}/api/v1`,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
  withCredentials: true, // –í–∫–ª—é—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É cookies
});

// Request interceptor
api.interceptors.request.use(
  (config) => {
    // –¢–æ–∫–µ–Ω —Ç–µ–ø–µ—Ä—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ HttpOnly cookies
    // –ù–µ –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor
api.interceptors.response.use(
  (response) => {
    return response;
  },
  (error) => {
    if (error.response?.status === 401 || error.response?.status === 403) {
      // –ü—Ä–∏ 401/403 –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫
      // Cookies –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—Å—Ç—è—Ç—Å—è —Å–µ—Ä–≤–µ—Ä–æ–º
      console.log('üîí JWT token expired or invalid - logging out user');
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage
      localStorage.removeItem('user');
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞
      window.dispatchEvent(new CustomEvent('auth-expired'));
      
      // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      // –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞
      if (error.config?.url?.includes('/auth/me') || error.config?.url?.includes('/users/profile')) {
        console.log('üîí Silent auth check failed - user not authenticated');
        return Promise.reject(new Error('UNAUTHORIZED_SILENT'));
      }
    }
    return Promise.reject(error);
  }
);

export const apiService = {
  // Health check
  async getHealth() {
    const response = await api.get('/health');
    return response.data;
  },

  // App info
  async getAppInfo() {
    const response = await api.get('/info');
    return response.data;
  },

  // User profile
  async getUserProfile() {
    const response = await api.get('/users/profile');
    return response.data;
  },

  async updateUserProfile(profileData: any) {
    const response = await api.put('/users/profile', profileData);
    return response.data;
  },

  // Categories
  async getCategories(language: string = 'ru') {
    const response = await api.get(`/categories?lang=${language}`);
    return response.data;
  },

  async getActiveCategories(language: string = 'ru') {
    const response = await api.get(`/categories/active?lang=${language}`);
    return response.data;
  },

  async getCategoryById(id: number, language: string = 'ru') {
    const response = await api.get(`/categories/${id}?lang=${language}`);
    return response.data;
  },

  async getCategoryByName(name: string, language: string = 'ru') {
    const response = await api.get(`/categories/name/${encodeURIComponent(name)}?lang=${language}`);
    return response.data;
  },

  async createCategory(categoryData: any) {
    const response = await api.post('/categories', categoryData);
    return response.data;
  },

  async updateCategory(id: number, categoryData: any) {
    const response = await api.put(`/categories/${id}`, categoryData);
    return response.data;
  },

  async deleteCategory(id: number) {
    const response = await api.delete(`/categories/${id}`);
    return response.data;
  },

  async searchCategories(query: string, language: string = 'ru') {
    const response = await api.get(`/categories/search?q=${encodeURIComponent(query)}&lang=${language}`);
    return response.data;
  },

  async searchActiveCategories(query: string, language: string = 'ru') {
    const response = await api.get(`/categories/search/active?q=${encodeURIComponent(query)}&lang=${language}`);
    return response.data;
  },

  // Users/Executors
  async getExecutors() {
    const response = await api.get('/users/executors');
    return response.data;
  },

  async getExecutorsByCategory(categoryId: number) {
    const response = await api.get(`/users/by-category/${categoryId}`);
    return response.data;
  },

  // Phone authentication
  async sendVerificationCode(phone: string) {
    const response = await api.post('/auth/send-verification-code', {
      phone
    });
    return response.data;
  },

  async verifyCode(phone: string, code: string, name?: string) {
    const response = await api.post('/auth/verify-code', {
      phone,
      code,
      name
    });
    return response.data;
  },

  async checkCode(phone: string, code: string) {
    const response = await api.post('/auth/check-code', {
      phone,
      code
    });
    return response.data;
  },

  async checkCodeStatus(phone: string) {
    const response = await api.get(`/auth/check-code-status?phone=${encodeURIComponent(phone)}`);
    return response.data;
  },

  async register(email: string, password: string, name: string) {
    const response = await api.post('/auth/register', {
      email,
      password,
      name
    });
    return response.data;
  },

  async logout() {
    const response = await api.post('/auth/logout');
    return response.data;
  },

  async getCurrentUser() {
    const response = await api.get('/auth/me');
    return response.data;
  },

  // User categories
  async getUserCategories(userId: number) {
    const response = await api.get(`/users/${userId}/categories`);
    return response.data;
  },

  // Avatar management
  async uploadAvatar(userId: number, file: File) {
    const formData = new FormData();
    formData.append('file', file);
    
    const response = await api.post(`/users/${userId}/avatar`, formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });
    return response.data;
  },

  async deleteAvatar(userId: number) {
    const response = await api.delete(`/users/${userId}/avatar`);
    return response.data;
  },

  async updateProfile(userId: number, profileData: { name?: string; email?: string }) {
    const response = await api.put(`/users/${userId}`, profileData);
    return response.data;
  },
};

export default api;
