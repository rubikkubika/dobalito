import React, { useState } from 'react';
import {
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  TextField,
  Box,
  InputAdornment,
  SelectChangeEvent
} from '@mui/material';
import PhoneIcon from '@mui/icons-material/Phone';

interface CountryCode {
  code: string;
  country: string;
  flag: string;
}

const countryCodes: CountryCode[] = [
  { code: '+7', country: '–†–æ—Å—Å–∏—è', flag: 'üá∑üá∫' },
  { code: '+7', country: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', flag: 'üá∞üáø' },
  { code: '+375', country: '–ë–µ–ª–∞—Ä—É—Å—å', flag: 'üáßüáæ' },
  { code: '+380', country: '–£–∫—Ä–∞–∏–Ω–∞', flag: 'üá∫üá¶' },
  { code: '+374', country: '–ê—Ä–º–µ–Ω–∏—è', flag: 'üá¶üá≤' },
  { code: '+995', country: '–ì—Ä—É–∑–∏—è', flag: 'üá¨üá™' },
  { code: '+998', country: '–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω', flag: 'üá∫üáø' },
  { code: '+996', country: '–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω', flag: 'üá∞üá¨' },
  { code: '+992', country: '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω', flag: 'üáπüáØ' },
  { code: '+993', country: '–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω', flag: 'üáπüá≤' },
  { code: '+1', country: '–°–®–ê', flag: 'üá∫üá∏' },
  { code: '+1', country: '–ö–∞–Ω–∞–¥–∞', flag: 'üá®üá¶' },
  { code: '+44', country: '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', flag: 'üá¨üáß' },
  { code: '+49', country: '–ì–µ—Ä–º–∞–Ω–∏—è', flag: 'üá©üá™' },
  { code: '+33', country: '–§—Ä–∞–Ω—Ü–∏—è', flag: 'üá´üá∑' },
  { code: '+39', country: '–ò—Ç–∞–ª–∏—è', flag: 'üáÆüáπ' },
  { code: '+34', country: '–ò—Å–ø–∞–Ω–∏—è', flag: 'üá™üá∏' },
  { code: '+86', country: '–ö–∏—Ç–∞–π', flag: 'üá®üá≥' },
  { code: '+81', country: '–Ø–ø–æ–Ω–∏—è', flag: 'üáØüáµ' },
  { code: '+82', country: '–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è', flag: 'üá∞üá∑' },
  { code: '+91', country: '–ò–Ω–¥–∏—è', flag: 'üáÆüá≥' },
  { code: '+55', country: '–ë—Ä–∞–∑–∏–ª–∏—è', flag: 'üáßüá∑' },
  { code: '+61', country: '–ê–≤—Å—Ç—Ä–∞–ª–∏—è', flag: 'üá¶üá∫' },
  { code: '+90', country: '–¢—É—Ä—Ü–∏—è', flag: 'üáπüá∑' },
  { code: '+966', country: '–°–∞—É–¥–æ–≤—Å–∫–∞—è –ê—Ä–∞–≤–∏—è', flag: 'üá∏üá¶' },
  { code: '+971', country: '–û–ê–≠', flag: 'üá¶üá™' },
  { code: '+972', country: '–ò–∑—Ä–∞–∏–ª—å', flag: 'üáÆüá±' },
  { code: '+20', country: '–ï–≥–∏–ø–µ—Ç', flag: 'üá™üá¨' },
  { code: '+27', country: '–Æ–ê–†', flag: 'üáøüá¶' },
];

interface PhoneInputProps {
  value: string;
  onChange: (value: string) => void;
  error?: boolean;
  helperText?: string;
  disabled?: boolean;
  placeholder?: string;
}

const PhoneInput: React.FC<PhoneInputProps> = ({
  value,
  onChange,
  error,
  helperText,
  disabled,
  placeholder = "900 123 45 67"
}) => {
  const [selectedCountry, setSelectedCountry] = useState<CountryCode>(countryCodes[0]);
  const [phoneNumber, setPhoneNumber] = useState('');

  // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  React.useEffect(() => {
    if (value) {
      const foundCountry = countryCodes.find(country => 
        value.startsWith(country.code)
      );
      if (foundCountry) {
        setSelectedCountry(foundCountry);
        setPhoneNumber(value.substring(foundCountry.code.length).trim());
      } else {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä
        const match = value.match(/^(\+?\d{1,4})\s*(.*)$/);
        if (match) {
          const code = match[1];
          const number = match[2];
          const country = countryCodes.find(c => c.code === code);
          if (country) {
            setSelectedCountry(country);
            setPhoneNumber(number);
          }
        }
      }
    }
  }, [value]);

  const handleCountryChange = (event: SelectChangeEvent) => {
    const countryCode = event.target.value;
    const country = countryCodes.find(c => c.code === countryCode);
    if (country) {
      setSelectedCountry(country);
      const fullPhone = `${country.code} ${phoneNumber}`.trim();
      onChange(fullPhone);
    }
  };

  const handlePhoneChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const number = event.target.value;
    setPhoneNumber(number);
    const fullPhone = `${selectedCountry.code} ${number}`.trim();
    onChange(fullPhone);
  };

  return (
    <Box sx={{ display: 'flex', gap: 1, alignItems: 'flex-start' }}>
      <FormControl 
        sx={{ minWidth: 120 }} 
        error={error}
        disabled={disabled}
      >
        <InputLabel>–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã</InputLabel>
        <Select
          value={selectedCountry.code}
          onChange={handleCountryChange}
          label="–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã"
          renderValue={(value) => {
            const country = countryCodes.find(c => c.code === value);
            return country ? `${country.flag} ${country.code}` : value;
          }}
        >
          {countryCodes.map((country) => (
            <MenuItem key={`${country.code}-${country.country}`} value={country.code}>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <span>{country.flag}</span>
                <span>{country.code}</span>
                <span style={{ color: '#666', fontSize: '0.9em' }}>
                  {country.country}
                </span>
              </Box>
            </MenuItem>
          ))}
        </Select>
      </FormControl>
      
      <TextField
        label="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        value={phoneNumber}
        onChange={handlePhoneChange}
        error={error}
        helperText={helperText}
        disabled={disabled}
        placeholder={placeholder}
        fullWidth
        InputProps={{
          startAdornment: (
            <InputAdornment position="start">
              <PhoneIcon />
            </InputAdornment>
          ),
        }}
        inputProps={{
          maxLength: 15,
        }}
      />
    </Box>
  );
};

export default PhoneInput;
